// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @default(autoincrement())
  uuid      String   @id @unique @default(uuid()) @db.Uuid
  username  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// model Admin {
//   uuid      String          @id @default(uuid())
//   username  String
//   email     String          @unique
//   password  String
//   isSuper   Boolean         @default(false)
//   privileges AdminPrivilege[]
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }

// model PrivilegeMaster {
//   uuid        String   @id @default(uuid())
//   name        String
//   description String
//   adminPrivileges AdminPrivilege[]
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model AdminPrivilege {
//   uuid            String         @id @default(uuid())
//   status          String
//   adminUuid       String
//   privilegeMasterUuid String
//   admin           Admin          @relation(fields: [adminUuid], references: [uuid])
//   privilegeMaster PrivilegeMaster @relation(fields: [privilegeMasterUuid], references: [uuid])
//   createdAt       DateTime       @default(now())
//   updatedAt       DateTime       @updatedAt
// }

model Admin {
  uuid       String           @id @default(uuid())
  username   String
  email      String           @unique
  password   String
  isSuper    Boolean          @default(false)
  privileges AdminPrivilege[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model PrivilegeMaster {
  uuid           String           @id @default(uuid())
  name           String
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AdminPrivilege AdminPrivilege[]
}

model AdminPrivilege {
  uuid                String          @id @default(uuid())
  status              Boolean
  adminUuid           String
  privilegeMasterUuid String
  admin               Admin           @relation(fields: [adminUuid], references: [uuid])
  privilegeMaster     PrivilegeMaster @relation(fields: [privilegeMasterUuid], references: [uuid])
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}
